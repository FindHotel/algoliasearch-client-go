// Code generated by go generate. DO NOT EDIT.

package search

import (
    "encoding/json"
    "fmt"

    "github.com/algolia/algoliasearch-client-go/algolia/debug"
    "github.com/algolia/algoliasearch-client-go/algolia/opt"
)

// Settings represents an index settings configuration.
type Settings struct {
    {{- range $_, $setting := . }}
    {{ title $setting.Name }} *opt.{{ title $setting.Name }}Option `json:"{{ $setting.Name }},omitempty"`
    {{- end }}
    CustomSettings map[string]interface{} `json:"-"`
}

type settings Settings

type backwardCompatibleSettings struct {
    {{- range $_, $setting := . -}}
    {{ if $setting.BackwardCompatibleAlternative }}
    {{ title $setting.BackwardCompatibleAlternative }} *opt.{{ title $setting.Name }}Option `json:"{{ $setting.BackwardCompatibleAlternative }},omitempty"`
    {{- end }}
    {{- end }}
}

func (s *Settings) UnmarshalJSON(data []byte) error {
    var bcSettings backwardCompatibleSettings
    err := json.Unmarshal(data, &bcSettings)
    if err != nil {
        return fmt.Errorf("cannot unmarshal backward-compatible settings: %v", err)
    }

    err = json.Unmarshal(data, (*settings)(s))
    if err != nil {
        return fmt.Errorf("cannot unmarshal settings: %v", err)
    }

    {{ range $_, $setting := . -}}
    {{ if $setting.BackwardCompatibleAlternative }}
    if s.{{ title $setting.Name }} == nil{
        s.{{ title $setting.Name }} = bcSettings.{{ title $setting.BackwardCompatibleAlternative }}
    }
    {{ end }}
    {{- end }}

    err = json.Unmarshal(data, &s.CustomSettings)
    if err != nil {
        return fmt.Errorf("cannot unmarshal unknown settings: %v", err)
    }
    for _, knownSetting := range []string{
        {{- range $_, $setting := . }}
        "{{ $setting.Name }}",
        {{- if $setting.BackwardCompatibleAlternative }}
        "{{ $setting.BackwardCompatibleAlternative }}",
        {{- end }}
        {{- end }}
    } {
        delete(s.CustomSettings, knownSetting)
    }

    return nil
}

// Equal returns true if given settings are the same as the instance one. Empty
// settings are considered equal to their default value counterpart.
func (s Settings) Equal(s2 Settings) bool {
    {{- range $_, $setting := . }}
    if !opt.{{ title $setting.Name }}Equal(s.{{ title $setting.Name}}, s2.{{ title $setting.Name }}) {
        debug.Printf("Settings.{{ title $setting.Name }} are not equal: %#v != %#v\n", s.{{ title $setting.Name }}, s2.{{ title $setting.Name }})
        return false
    }
    {{- end }}
    return true
}
